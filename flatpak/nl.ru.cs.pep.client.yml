id: nl.ru.cs.pep.client
runtime: org.kde.Platform
runtime-version: '6.7'
sdk: org.kde.Sdk
base: nl.ru.cs.pep.base
command: run.sh
finish-args:
  - --share=ipc
  - --socket=x11
  - --socket=fallback-x11
  - --socket=wayland
  - --filesystem=host
  - --device=dri
  - --share=network
build-options:
  env:
    CMAKE_COLOR_DIAGNOSTICS: 'ON'  # Let CMake pass -fcolor-diagnostics
    CLICOLOR_FORCE: '1'  # Colored output for e.g. Conan & Ninja (otherwise -fcolor-diagnostics still won't work)
modules:
  - name: pep
    buildsystem: simple
    #language=sh
    build-commands:
      - |
        set -eu
        # Make sure CMake can find presets generated by Conan
        cp "${FLATPAK_DEST}/tmp/build/generators/CMakePresets.json" ./

        # Load environment variables passed from CI
        [ -f ./flatpak.env ] && cat ./flatpak.env && . ./flatpak.env

        # Remove old(ish) cache entries, as the cache upload was taking longer than the job itself
        ccache --evict-older-than "$CCACHE_EXPIRATION_TIME"

        # Print Ccache stats before each job
        ccache --zero-stats 2> /dev/null
        ccache --show-stats --verbose 2> /dev/null

        cmake --preset conan-release \
          -DGENERATE_PKI=OFF

        cmake --build --preset conan-release --parallel "$FLATPAK_BUILDER_N_JOBS" \
          --target pepAssessor pepcli pepLogon

        for component in pepAssessor pepcli pepLogon; do
          cmake --install "${FLATPAK_DEST}/tmp/build/" --prefix "${FLATPAK_DEST}" --component "${component}"
        done
        mkdir -p "$FLATPAK_DEST/share/"
        cp -r "$FLATPAK_DEST/tmp/build/autocomplete" "$FLATPAK_DEST/share/autocomplete"

        # Perform this here instead of in cleanup-commands to stop flatpak from spending time stripping debug info from things like CMakeDetermineCompilerABI_C.bin
        rm -rf "${FLATPAK_DEST}/tmp/"

        # Print ccache stats
        CCACHE_DIR="$PWD/ccache" ccache --show-stats --verbose 2> /dev/null
    sources:
      - type: dir
        path: ../
        skip:
          - build
          - bin
          - out
          - CMakeUserPresets.json
    build-options:
      build-args:
        - --share=network

  # The script below will simply run the arguments that are passed to the flatpak directly as a shell command.
  # So now you can run e.g. (assuming you are on the master environment):
  # - flatpak run nl.ru.cs.pep.dtap-master pepcli ama query
  # - flatpak run nl.ru.cs.pep.dtap-master pepAssessor
  # - flatpak run nl.ru.cs.pep.dtap-master pepLogon
  # - flatpak run nl.ru.cs.pep.dtap-master bash
  - name: HelperScript
    buildsystem: simple
    build-commands:
      - install -Dm755 -t /app/bin/ run.sh
    sources:
      - type: script
        dest-filename: run.sh
        commands:
          - "$@"
