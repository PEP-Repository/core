#include <pep/elgamal/CurveScalar.hpp>

#include <pep/utils/CollectionUtils.hpp>

#include <boost/algorithm/hex.hpp>
#include <gtest/gtest.h>

namespace {

TEST(CurveScalarTest, TestConstructor1) {
  pep::CurveScalar scalarA;
  pep::CurveScalar scalarB;
  EXPECT_EQ(scalarA, scalarB) << "Scalars are not equal";
}

TEST(CurveScalarTest, TestConstructor2) {
  pep::CurveScalar scalarA = pep::CurveScalar::Random();
  pep::CurveScalar scalarB(scalarA);
  EXPECT_EQ(scalarA, scalarB) << "Scalars are not equal";
}

TEST(CurveScalarTest, TestOrder) {
  uint8_t packedZero[pep::CurveScalar::PACKEDBYTES] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  };
  uint8_t packedOrder[pep::CurveScalar::PACKEDBYTES] = {
    0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
    0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
  };

  pep::CurveScalar scalarA(pep::SpanToString(packedZero));
  pep::CurveScalar scalarB(pep::SpanToString(packedOrder));
  EXPECT_EQ(scalarA, scalarB) << "Order of the basepoint is incorrect";
}

TEST(CurveScalarTest, TestPack) {
  pep::CurveScalar scalarA = pep::CurveScalar::Random();
  pep::CurveScalar scalarB(scalarA.pack());
  EXPECT_EQ(scalarA, scalarB) << "Scalar not equal after packing/unpacking";
}

TEST(CurveScalarTest, TestCompare) {
  pep::CurveScalar scalarA;
  EXPECT_EQ(scalarA, scalarA) << "Scalar is not equal to itself";
  pep::CurveScalar scalarB = pep::CurveScalar::Random();
  EXPECT_EQ(scalarB, scalarB) << "Scalar is not equal to itself";
  EXPECT_NE(scalarA, scalarB) << "Different scalars are equal";
}

TEST(CurveScalarTest, TestRandom) {
  pep::CurveScalar scalarA = pep::CurveScalar::Random();
  pep::CurveScalar scalarB = pep::CurveScalar::Random();
  EXPECT_NE(scalarA, scalarB) << "Random scalars are equal";
}

TEST(CurveScalarTest, TestSum) {
  uint8_t packedA[pep::CurveScalar::PACKEDBYTES] = {
    0xad, 0x5f, 0xf3, 0x9f, 0x74, 0x47, 0x40, 0x12,
    0x6f, 0xaa, 0x92, 0xcb, 0x6c, 0xfc, 0xfb, 0xd2,
    0xa0, 0x0a, 0x2a, 0x98, 0xd0, 0xc1, 0x5f, 0x54,
    0xe0, 0x7a, 0x39, 0x36, 0x1a, 0x39, 0xf1, 0x0b
  };
  uint8_t packedB[pep::CurveScalar::PACKEDBYTES] = {
    0xb3, 0xd9, 0x62, 0xd2, 0x61, 0x87, 0x2a, 0xbc,
    0xc3, 0xe2, 0x4e, 0x2c, 0xb7, 0xb1, 0xc7, 0xe0,
    0x76, 0x2b, 0xb6, 0xe7, 0x17, 0x3c, 0x81, 0x3b,
    0x00, 0x0a, 0x62, 0x06, 0xb8, 0x8f, 0x58, 0x06
  };
  uint8_t packedC[pep::CurveScalar::PACKEDBYTES] = {
    0x60, 0x39, 0x56, 0x72, 0xd6, 0xce, 0x6a, 0xce,
    0x32, 0x8d, 0xe1, 0xf7, 0x23, 0xae, 0xc3, 0xb3,
    0x17, 0x36, 0xe0, 0x7f, 0xe8, 0xfd, 0xe0, 0x8f,
    0xe0, 0x84, 0x9b, 0x3c, 0xd2, 0xc8, 0x49, 0x12
  };
  pep::CurveScalar scalarA(pep::SpanToString(packedA));
  pep::CurveScalar scalarB(pep::SpanToString(packedB));
  pep::CurveScalar scalarC(pep::SpanToString(packedC));
  EXPECT_EQ(scalarA.add(scalarB),scalarC) << "sum of scalars is incorrect";
}

TEST(CurveScalarTest, TestAddSub) {
  pep::CurveScalar scalarA = pep::CurveScalar::Random();
  pep::CurveScalar scalarB = pep::CurveScalar::Random();
  pep::CurveScalar scalarC = scalarA.add(scalarB);
  pep::CurveScalar scalarD = scalarC.sub(scalarB);
  EXPECT_EQ(scalarA, scalarD) << "A + B - B != A";
}

TEST(CurveScalarTest, TestMult) {
  uint8_t packedA[pep::CurveScalar::PACKEDBYTES] = {
    0x88, 0xe9, 0xf7, 0xac, 0xef, 0x25, 0x8f, 0xd9,
    0x77, 0x35, 0x97, 0x74, 0x13, 0x22, 0x49, 0x3b,
    0x8f, 0x3d, 0xf7, 0x88, 0x53, 0x54, 0xdb, 0x50,
    0xee, 0x5a, 0xc2, 0x06, 0x91, 0x39, 0xfc, 0x00
  };
  uint8_t packedB[pep::CurveScalar::PACKEDBYTES] = {
    0xf6, 0x5b, 0x9b, 0x63, 0x61, 0x17, 0x1e, 0x34,
    0xed, 0xf3, 0xb5, 0x4e, 0x3b, 0x6d, 0x72, 0x33,
    0x23, 0x01, 0x00, 0x0b, 0xcb, 0x3b, 0x75, 0x28,
    0x99, 0x25, 0xdd, 0x59, 0x54, 0xa9, 0x28, 0x04
  };
  uint8_t packedC[pep::CurveScalar::PACKEDBYTES] = {
    0xa0, 0x2d, 0x98, 0x7a, 0x4a, 0x20, 0xef, 0x79,
    0x83, 0xcc, 0xc7, 0x6e, 0xb7, 0x22, 0x02, 0xa8,
    0x01, 0x76, 0x46, 0xb5, 0xa6, 0x70, 0x2a, 0x6e,
    0x31, 0x9b, 0x1e, 0xe5, 0x15, 0x1e, 0x18, 0x0b
  };
  pep::CurveScalar scalarA(pep::SpanToString(packedA));
  pep::CurveScalar scalarB(pep::SpanToString(packedB));
  pep::CurveScalar scalarC(pep::SpanToString(packedC));
  EXPECT_EQ(scalarA.mult(scalarB),scalarC) << "product of scalars is incorrect";
}

TEST(CurveScalarTest, TestSub) {
  uint8_t packedA[pep::CurveScalar::PACKEDBYTES] = {
    0x68, 0x64, 0x99, 0xfc, 0x63, 0x85, 0x76, 0xa2,
    0x9a, 0x4c, 0xc2, 0x17, 0x35, 0xe3, 0x44, 0xb1,
    0xbd, 0xc1, 0x5e, 0xde, 0x60, 0x67, 0xfe, 0x91,
    0xc4, 0x08, 0xe5, 0xb0, 0xeb, 0xcc, 0x14, 0x01
  };
  uint8_t packedB[pep::CurveScalar::PACKEDBYTES] = {
    0x49, 0xea, 0x39, 0x8c, 0xe4, 0x74, 0x2c, 0xf5,
    0xbe, 0x4e, 0xc5, 0xb5, 0x03, 0x78, 0xad, 0x6b,
    0x8f, 0x95, 0x99, 0x1a, 0xc1, 0x10, 0xa3, 0xa8,
    0x5f, 0xd8, 0xa4, 0x04, 0x89, 0x69, 0xce, 0x03
  };
  uint8_t packedC[pep::CurveScalar::PACKEDBYTES] = {
    0x0c, 0x4e, 0x55, 0xcd, 0x99, 0x73, 0x5c, 0x05,
    0xb2, 0x9a, 0xf4, 0x04, 0x10, 0x65, 0x76, 0x5a,
    0x2e, 0x2c, 0xc5, 0xc3, 0x9f, 0x56, 0x5b, 0xe9,
    0x64, 0x30, 0x40, 0xac, 0x62, 0x63, 0x46, 0x0d
  };
  pep::CurveScalar scalarA(pep::SpanToString(packedA));
  pep::CurveScalar scalarB(pep::SpanToString(packedB));
  pep::CurveScalar scalarC(pep::SpanToString(packedC));
  EXPECT_EQ(scalarA.sub(scalarB),scalarC) << "substraction of scalars is incorrect";
}

TEST(CurveScalarTest, TestMultInvert) {
  for (int i = 0; i < 100; i++) {
    pep::CurveScalar scalarA = pep::CurveScalar::Random();
    pep::CurveScalar scalarB = pep::CurveScalar::Random();
    pep::CurveScalar scalarC = scalarA.mult(scalarB);
    pep::CurveScalar scalarD = scalarC.mult(scalarB.invert());
    EXPECT_EQ(scalarA, scalarD) << "A * B * B^-1 != A";
  }
}

TEST(CurveScalarTest, TestMultInvert2) {
  uint8_t packedA[pep::CurveScalar::PACKEDBYTES] = {
    0x1e, 0xa5, 0x1e, 0xce, 0xb5, 0x83, 0xb1, 0x7a,
    0xd4, 0x67, 0xfe, 0x66, 0xe1, 0x6a, 0xbd, 0x20,
    0x03, 0x04, 0xe4, 0xee, 0xf2, 0x8c, 0x8f, 0xd7,
    0x0f, 0x9c, 0x89, 0x21, 0xc1, 0x57, 0x66, 0x08
  };
  uint8_t packedB[pep::CurveScalar::PACKEDBYTES] = {
    0xf6, 0x8d, 0xe9, 0x7b, 0x69, 0x37, 0x55, 0xc1,
    0x7d, 0x26, 0x58, 0xcd, 0x09, 0x70, 0xcf, 0xfb,
    0xe0, 0xa0, 0xe0, 0xd7, 0xff, 0x98, 0xce, 0x80,
    0x46, 0x33, 0xc6, 0x64, 0xa0, 0x17, 0x95, 0x03
  };
  pep::CurveScalar scalarA(pep::SpanToString(packedA));
  pep::CurveScalar scalarB(pep::SpanToString(packedB));
  EXPECT_EQ(scalarA.invert(),scalarB) << "inversion of scalars is incorrect";
}

TEST(CurveScalarTest, TestSquare) {
  pep::CurveScalar scalarA = pep::CurveScalar::Random();
  pep::CurveScalar scalarB = scalarA.square();
  pep::CurveScalar scalarC = scalarA.mult(scalarA);
  EXPECT_EQ(scalarB, scalarC) << "A^2 != A*A";
}

TEST(CurveScalarTest, TestSquare2) {
  uint8_t packedA[pep::CurveScalar::PACKEDBYTES] = {
    0x95, 0x82, 0x5e, 0xba, 0x0a, 0x71, 0x00, 0xc1,
    0x7d, 0x1c, 0xcb, 0xca, 0x84, 0x37, 0x5a, 0x8f,
    0xfc, 0x38, 0xaf, 0x09, 0x4f, 0xe2, 0xa5, 0x32,
    0x74, 0x1a, 0xb8, 0x2a, 0xaa, 0x29, 0x75, 0x07
  };
  uint8_t packedB[pep::CurveScalar::PACKEDBYTES] = {
    0x49, 0x57, 0xb0, 0x91, 0x45, 0x4e, 0xf6, 0x97,
    0x61, 0x43, 0x48, 0xd4, 0x4a, 0x4b, 0x9b, 0xc8,
    0xa0, 0x26, 0xaa, 0x4f, 0x4a, 0x4e, 0x87, 0x6f,
    0x95, 0x7c, 0x5a, 0x7f, 0x55, 0x16, 0xd7, 0x0e
  };
  pep::CurveScalar scalarA(pep::SpanToString(packedA));
  pep::CurveScalar scalarB(pep::SpanToString(packedB));
  EXPECT_EQ(scalarA.square(),scalarB) << "square of scalars is incorrect";
}

TEST(CurveScalarTest, TestScalarFrom64Bytes) {
  uint8_t dataA[64] = {0xFF};
  pep::CurveScalar scalarA = pep::CurveScalar::From64Bytes(pep::SpanToString(dataA));

  uint8_t dataB[64] = {0x00};
  pep::CurveScalar scalarB = pep::CurveScalar::From64Bytes(pep::SpanToString(dataB));

  EXPECT_NE(scalarA, scalarB) << "Different scalars are equal";
}

TEST(CurveScalarTest, TestHash) {
  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::Hash("test1").pack()),
    "F4F2BA0ECCC056C32241B5E7F648FFE6BF870773E09104F0FD2C28FBD7FC5402");
  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::Hash("ristretto").pack()),
    "A17454B11DA0EE4F9AED08190C61781C326A0C59BB449133BACC0C75308DB805");
  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::Hash("decaf").pack()),
    "8107E19264D3E54E9869DE056C90DC245DBC097529C4A5EF0DAE42E1F3CD7700");

  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::ShortHash("test1").pack()),
    "B16ED7D24B3ECBD4164DCDAD374E08C000000000000000000000000000000000");
  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::ShortHash("ristretto").pack()),
    "27BF1D7100B6A72BD2B2F43BABB948B500000000000000000000000000000000");
  EXPECT_EQ(
    boost::algorithm::hex(pep::CurveScalar::ShortHash("decaf").pack()),
    "39E5D267455ABFCE52284AC648D4B97100000000000000000000000000000000");
}

}
