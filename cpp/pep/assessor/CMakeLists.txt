set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON) # So we can find headers generated by QT

include("../ProvideQt.cmake")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

# Target sources
set(ASSESSOR_SRCS
  Async.cpp Async.hpp
  Branding.cpp Branding.hpp
  Branding.PropertySerializer.cpp Branding.PropertySerializer.hpp
  ExportableItem.cpp ExportableItem.hpp
  InputValidationTooltip.cpp InputValidationTooltip.hpp
  assessorwidget.cpp assessorwidget.hpp
  dateeditor.cpp dateeditor.hpp
  datetimeeditor.cpp datetimeeditor.hpp
  devicehistorywidget.cpp devicehistorywidget.hpp
  devicewidget.cpp devicewidget.hpp
  enrollmentwidget.cpp enrollmentwidget.hpp
  exportwidget.cpp exportwidget.hpp
  Installer.cpp Installer.hpp
  loginwidget.cpp loginwidget.hpp
  main.cpp
  mainwindow.cpp mainwindow.hpp
  notconnectedwidget.cpp notconnectedwidget.hpp
  ParticipantData.hpp
  participanteditor.cpp participanteditor.hpp
  participantselector.cpp participantselector.hpp
  participantwidget.cpp participantwidget.hpp
  QDate.cpp QDate.hpp
  VisitCaptions.hpp
  visitwidget.cpp visitwidget.hpp
  FlowLayout.cpp FlowLayout.hpp
  ButtonBar.cpp ButtonBar.hpp
  UserRole.cpp UserRole.hpp
)
if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(ASSESSOR_SRCS ${ASSESSOR_SRCS} guilib/Icon.rc guilib/VersionInfo.rc)
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
  set(ASSESSOR_SRCS ${ASSESSOR_SRCS} SparkleUpdater.mm SparkleUpdater.h)
endif()

qt_add_resources(RES_SOURCES
  guilib/resources.qrc
  )

# Executable target must differ from any directory names
# Windows targets
if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
  add_cli_install_executable(${PROJECT_NAME}Assessor WIN32)
  add_dependencies(${PROJECT_NAME}Assessor ${PROJECT_NAME}Elevate)

# macOS targets
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")

  find_package(Sparkle REQUIRED)

  if(NOT SPARKLE_LIBRARY)
      message(FATAL_ERROR "Sparkle library not found")
  endif()

  set(OSX_APP_ICON ${CMAKE_CURRENT_SOURCE_DIR}/guilib/appicon.icns)
  add_cli_install_executable(${PROJECT_NAME}Assessor MACOSX_BUNDLE ${OSX_APP_ICON})
  set(CLIENT_SUBDIR ${PROJECT_NAME}Assessor.app/Contents/Resources)

  # Set app icon location to resources folder
  set_source_files_properties(${OSX_APP_ICON} PROPERTIES
     MACOSX_PACKAGE_LOCATION "Resources")

  target_link_libraries(${PROJECT_NAME}Assessor PRIVATE Sparkle::Sparkle)

  # Enable ARC for the objective-c++ file
  set_source_files_properties(SparkleUpdater.mm PROPERTIES COMPILE_FLAGS "-fobjc-arc")

  #TODO cleanup using --install approach as used on Windows?
  add_custom_command(TARGET ${PROJECT_NAME}Assessor POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:${PROJECT_NAME}Assessor>/../Frameworks/
    COMMAND cp -R ${SPARKLE_LIBRARY} $<TARGET_FILE_DIR:${PROJECT_NAME}Assessor>/../Frameworks/
    COMMAND install_name_tool -change @rpath/Sparkle.framework/Versions/B/Sparkle @executable_path/../Frameworks/Sparkle.framework/Versions/B/Sparkle $<TARGET_FILE:${PROJECT_NAME}Assessor>
    )

# Linux / BSD targets
else()
  add_cli_install_executable(${PROJECT_NAME}Assessor)
endif()

set_target_properties(${PROJECT_NAME}Assessor PROPERTIES
  AUTOUIC ON
  AUTOUIC_SEARCH_PATHS ./guilib/ui_headers/
)

target_sources(${PROJECT_NAME}Assessor PRIVATE
  ${ASSESSOR_SRCS}
  ${RES_SOURCES}
)

qt_add_translations(${PROJECT_NAME}Assessor
  SOURCE_TARGETS ${PROJECT_NAME}Assessor
  TS_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/translations/pep_en.ts"
    "${CMAKE_CURRENT_SOURCE_DIR}/translations/pep_nl.ts"
)

find_package(Boost REQUIRED)
target_link_libraries(${PROJECT_NAME}Assessor PRIVATE
  ${PROJECT_NAME}Guilib
  ${PROJECT_NAME}OAuthClientlib
  ${PROJECT_NAME}Clientlib
  ${PROJECT_NAME}Applicationlib
  Boost::date_time
)

include(${PROJECT_SOURCE_DIR}/pki/pki.cmake)

if (NOT DEFINED CLIENT_SUBDIR)
  set(CLIENT_SUBDIR .)
endif()

configure_executable_companion_to_subdir(${CLIENT_SUBDIR} ${PEP_INFRA_DIR}/client/ClientConfig.json REPLACE_VARIABLES)
configure_executable_companion_to_subdir(${CLIENT_SUBDIR} ${PEP_INFRA_DIR}/client/ClientKeys.json OPTIONAL)
configure_executable_companion_to_subdir(${CLIENT_SUBDIR} ${PEP_INFRA_DIR}/ShadowAdministration.pub OPTIONAL)
configure_executable_companion_to_subdir(${CLIENT_SUBDIR} ${PEP_INFRA_DIR}/rootCA.cert OPTIONAL)
configure_executable_companion_to_subdir(${CLIENT_SUBDIR} ${PEP_LOCAL_INFRA_DIR}/authserver/AuthserverHTTPSCertificate.pem OPTIONAL)
configure_executable_config_version(${PROJECT_NAME}Assessor infra) # TODO: support ${CLIENT_SUBDIR}
configure_executable_companions_to_subdir_from(${CLIENT_SUBDIR} ${PEP_PROJECT_DIR}/client)

# Only copy generated PKI file if predefined one does not exist for this infrastructure
if(NOT EXISTS "${PEP_INFRA_DIR}/rootCA.cert")
  copy_pki_files(TARGET assessor_pki SUBDIRECTORY ${CLIENT_SUBDIR} FILES rootCA.cert)
  add_dependencies(${PROJECT_NAME}Assessor assessor_pki)
endif()
