#pragma once

#include <pep/archiving/Archive.hpp>
#include <pep/utils/Shared.hpp>
#include <pep/utils/XxHasher.hpp>

#include <map>

namespace pep {

class HashedArchive : public Archive, public SharedConstructor<HashedArchive> {
  friend class SharedConstructor<HashedArchive>;
public:
  static constexpr XxHasher::Hash DOWNLOAD_HASH_SEED{0x6b82b736949d3ba5}; // DO NOT CHANGE to prevent invalidation of previously generated hashes. Value was generated by https://www.random.org/cgi-bin/randbyte?nbytes=8&format=h


  void nextEntry(const std::filesystem::path& path, int64_t size) override;
  void writeData(const char* c, const std::streamsize l) override;
  void writeData(std::string_view data) override;
  void closeEntry() override;
  bool expectsSizeUpFront() override;
  XxHasher::Hash digest() const;

  void processDirectory(const std::filesystem::path& path, const::std::filesystem::path& subpath);
  static XxHasher::Hash HashDirectory(const std::filesystem::path& path);

private:
  HashedArchive(std::shared_ptr<Archive> archive);

  std::shared_ptr<Archive> mArchive;
  std::unique_ptr<XxHasher> mHasher;
  std::string mCurrentEntry;
  std::map<std::string, XxHasher::Hash> mHashes; //The consistency of the final hash relies on the consistent sorting provided by std::map
};

}
