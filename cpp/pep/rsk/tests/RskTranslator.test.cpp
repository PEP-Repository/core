#include <pep/rsk/RskTranslator.hpp>

#include <stdexcept>

#include <gtest/gtest.h>

using namespace pep;

namespace {

class RskTranslatorTest : public ::testing::Test {
protected:
  static CurveScalar scalar(const std::array<uint8_t, CurveScalar::PACKEDBYTES>& packed) {
    return CurveScalar(SpanToString(packed));
  }

  static CurvePoint point(const std::array<uint8_t, CurvePoint::PACKEDBYTES>& packed) {
    return CurvePoint(SpanToString(packed));
  }

  static KeyFactorSecret factorSecret(const std::array<uint8_t, 64>& packed) {
    return KeyFactorSecret(std::as_bytes(std::span(packed)));
  }

  RskTranslator rsk{RskTranslator::Keys{
      .domain = 1,
      .reshuffle{{factorSecret(
          {0x9E, 0xA1, 0x69, 0x80, 0xA3, 0xC3, 0x60, 0x81,
           0x5F, 0xC0, 0xEF, 0x52, 0x4E, 0x94, 0x18, 0x7E,
           0x82, 0x81, 0x7E, 0x27, 0x41, 0x56, 0xDF, 0xBB,
           0x2D, 0xAC, 0xF8, 0x8E, 0x5A, 0xF4, 0x35, 0xCD,
           0x51, 0x49, 0xE2, 0xCE, 0xFD, 0x57, 0xB9, 0x9D,
           0x7F, 0xF7, 0x21, 0x55, 0xF7, 0xD2, 0xC3, 0xAD,
           0x95, 0xEB, 0xAA, 0xB5, 0xCC, 0x3A, 0x60, 0x9D,
           0xCC, 0xC9, 0xE0, 0xBC, 0xD6, 0xF2, 0x80, 0x66})}},
      .rekey{factorSecret(
          {0xD3, 0x0F, 0x74, 0x62, 0x60, 0xE6, 0xDB, 0xA0,
           0xAB, 0xB0, 0x28, 0xFD, 0x26, 0x1D, 0x49, 0xA4,
           0xF1, 0x9C, 0x9D, 0x81, 0x9A, 0x3D, 0xD0, 0xCD,
           0xF6, 0x1B, 0xB8, 0x64, 0x5F, 0x8E, 0x94, 0x0E,
           0x89, 0xCC, 0xC4, 0x84, 0xBC, 0x92, 0xB8, 0xFE,
           0x2F, 0x70, 0x15, 0x86, 0x8F, 0xB8, 0xB6, 0xFA,
           0xAE, 0x9A, 0x53, 0xE9, 0x6C, 0x5B, 0x0C, 0xF3,
           0xAE, 0x94, 0xBA, 0xC4, 0x4C, 0xFB, 0xA9, 0x19})},
  }};
  RskTranslator rk{RskTranslator::Keys{
      .domain = 2,
      .reshuffle{},
      .rekey{factorSecret(
          {0x79, 0x79, 0x2D, 0x7B, 0x67, 0x8D, 0x2E, 0x35,
           0xCC, 0x8A, 0x42, 0x24, 0x35, 0x76, 0x49, 0x99,
           0xCD, 0xB4, 0x60, 0x86, 0x60, 0x14, 0xEB, 0x61,
           0x04, 0x32, 0xE9, 0x6E, 0xB9, 0x8D, 0x35, 0x5D,
           0x13, 0xB0, 0x85, 0xA0, 0x20, 0x98, 0x41, 0x4E,
           0x59, 0xF3, 0xEF, 0x9C, 0x9F, 0x40, 0x5D, 0x39,
           0x26, 0xFF, 0x93, 0x92, 0x4C, 0x5E, 0xC9, 0xB0,
           0xC6, 0x4A, 0xF3, 0xA3, 0xCB, 0xEF, 0x92, 0x25})},
  }};
};

TEST_F(RskTranslatorTest, generateReshuffleKeyFactor) {
  const ReshuffleRecipient recipient(1, "Group1");
  const auto factor = rsk.generateKeyFactor(recipient);
  const auto expectedFactor = scalar(
      {0x67, 0x26, 0x79, 0xE9, 0x54, 0xA4, 0xBE, 0xF9,
       0x60, 0x00, 0x27, 0xF8, 0xF1, 0xDC, 0x61, 0xEE,
       0x97, 0x2D, 0xC1, 0x05, 0x37, 0x27, 0xFB, 0x29,
       0x5A, 0x6D, 0x3D, 0x78, 0xDB, 0xEB, 0xE9, 0x07});
  EXPECT_EQ(factor, expectedFactor);
}

TEST_F(RskTranslatorTest, generateRekeyFactor) {
  const RekeyRecipient recipient(1, "User1");
  const auto factor = rsk.generateKeyFactor(recipient);
  const auto expectedFactor = scalar(
      {0xFF, 0xC6, 0xD3, 0x57, 0x72, 0x35, 0x9A, 0x52,
       0x41, 0x0D, 0x73, 0x9D, 0x67, 0x7E, 0x7C, 0xD5,
       0xF1, 0x11, 0x09, 0x91, 0x32, 0x36, 0xF8, 0x08,
       0xA5, 0x76, 0x49, 0x63, 0x90, 0x54, 0x53, 0x07});
  EXPECT_EQ(factor, expectedFactor);
}

TEST_F(RskTranslatorTest, generateBothKeyFactors) {
  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  const auto factors = rsk.generateKeyFactors(recipient);
  const auto expectedReshuffleFactor = scalar(
      {0x67, 0x26, 0x79, 0xE9, 0x54, 0xA4, 0xBE, 0xF9,
       0x60, 0x00, 0x27, 0xF8, 0xF1, 0xDC, 0x61, 0xEE,
       0x97, 0x2D, 0xC1, 0x05, 0x37, 0x27, 0xFB, 0x29,
       0x5A, 0x6D, 0x3D, 0x78, 0xDB, 0xEB, 0xE9, 0x07});
  const auto expectedRekeyFactor = scalar(
      {0xFF, 0xC6, 0xD3, 0x57, 0x72, 0x35, 0x9A, 0x52,
       0x41, 0x0D, 0x73, 0x9D, 0x67, 0x7E, 0x7C, 0xD5,
       0xF1, 0x11, 0x09, 0x91, 0x32, 0x36, 0xF8, 0x08,
       0xA5, 0x76, 0x49, 0x63, 0x90, 0x54, 0x53, 0x07});
  EXPECT_EQ(factors.reshuffle, expectedReshuffleFactor);
  EXPECT_EQ(factors.rekey, expectedRekeyFactor);
}

TEST_F(RskTranslatorTest, generateOnlyRekeyFactor) {
  const RekeyRecipient recipient(1, "User1");
  const auto factor = rk.generateKeyFactor(recipient);
  const auto expectedFactor = scalar(
      {0x28, 0xCB, 0x00, 0xC8, 0xF6, 0xA2, 0xE1, 0x87,
       0x8C, 0xBB, 0x4A, 0x87, 0xA8, 0x0F, 0x2C, 0x7E,
       0x6E, 0xBA, 0x26, 0x94, 0x23, 0x88, 0x34, 0x43,
       0x8C, 0xCC, 0x17, 0x59, 0xFA, 0x85, 0x64, 0x07});
  EXPECT_EQ(factor, expectedFactor);
}

TEST_F(RskTranslatorTest, missingReshuffleKey) {
  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  EXPECT_THROW((void) rk.generateKeyFactor(static_cast<const ReshuffleRecipient&>(recipient)), std::logic_error);
  EXPECT_THROW((void) rk.generateKeyFactors(recipient), std::logic_error);
}

TEST_F(RskTranslatorTest, rsk) {
  const auto data = CurvePoint::Random();
  const auto [sk, pk] = ElgamalEncryption::CreateKeyPair();
  const ElgamalEncryption encryption(pk, data);

  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  const auto factors = rsk.generateKeyFactors(recipient);
  const auto transformed = rsk.rsk(encryption, factors);

  const auto skRecipient = rsk.generateKeyComponent(factors.rekey, sk);
  const auto decrypted = transformed.decrypt(skRecipient);
  const auto dataReshuffle = data.mult(factors.reshuffle);
  EXPECT_EQ(decrypted, dataReshuffle);
}

TEST_F(RskTranslatorTest, rskZeroEncryption) {
  const auto data = CurvePoint::Random();
  const ElgamalPublicKey pk;
  ASSERT_TRUE(pk.isZero());
  const ElgamalEncryption encryption(pk, data);

  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  const auto factors = rsk.generateKeyFactors(recipient);
  EXPECT_THROW((void) rsk.rsk(encryption, factors), std::invalid_argument);
  EXPECT_THROW((void) rsk.rk(encryption, factors.rekey), std::invalid_argument);
  EXPECT_THROW((void) rsk.rs(encryption, factors.reshuffle), std::invalid_argument);
  EXPECT_THROW((void) rsk.certifiedRsk(encryption, factors), std::invalid_argument);
}

TEST_F(RskTranslatorTest, rk) {
  const auto data = CurvePoint::Random();
  const auto [sk, pk] = ElgamalEncryption::CreateKeyPair();
  const ElgamalEncryption encryption(pk, data);

  const RekeyRecipient recipient(1, "User1");
  const auto factor = rsk.generateKeyFactor(recipient);
  const auto transformed = rsk.rk(encryption, factor);

  const auto skRecipient = rsk.generateKeyComponent(factor, sk);
  const auto decrypted = transformed.decrypt(skRecipient);
  EXPECT_EQ(decrypted, data);
}

TEST_F(RskTranslatorTest, rs) {
  const auto data = CurvePoint::Random();
  const auto [sk, pk] = ElgamalEncryption::CreateKeyPair();
  const ElgamalEncryption encryption(pk, data);

  const ReshuffleRecipient recipient(1, "User1");
  const auto factor = rsk.generateKeyFactor(recipient);
  const auto transformed = rsk.rs(encryption, factor);

  const auto decrypted = transformed.decrypt(sk);
  const auto dataReshuffle = data.mult(factor);
  EXPECT_EQ(decrypted, dataReshuffle);
}

TEST_F(RskTranslatorTest, certifiedRsk) {
  const auto data = CurvePoint::Random();
  const auto [sk, pk] = ElgamalEncryption::CreateKeyPair();
  const ElgamalEncryption encryption(pk, data);

  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  const auto factors = rsk.generateKeyFactors(recipient);
  const auto verifiers = rsk.computeRskProofVerifiers(factors, pk);
  const auto [transformed, proof] = rsk.certifiedRsk(encryption, factors);
  EXPECT_NO_THROW(proof.verify(encryption, transformed, verifiers));

  const auto skRecipient = rsk.generateKeyComponent(factors.rekey, sk);
  const auto decrypted = transformed.decrypt(skRecipient);
  const auto dataReshuffle = data.mult(factors.reshuffle);
  EXPECT_EQ(decrypted, dataReshuffle);
}

TEST_F(RskTranslatorTest, rskProofVerifiers) {
  const ElgamalPublicKey pk = point(
      {0x04, 0x5C, 0xB4, 0xE3, 0x40, 0x49, 0x5A, 0x2B,
       0x5A, 0x30, 0xDD, 0x44, 0xA7, 0xB8, 0x25, 0x02,
       0xEA, 0xAF, 0x81, 0xED, 0xC4, 0xE4, 0xDA, 0x11,
       0x78, 0x53, 0xA0, 0x93, 0x54, 0x89, 0x01, 0x1A});

  const SkRecipient recipient(1, {.reshuffle = "Group1", .rekey = "User1"});
  const auto factors = rsk.generateKeyFactors(recipient);
  const auto verifiers = rsk.computeRskProofVerifiers(factors, pk);
  const RSKVerifiers expectedVerifiers(
      point({0xEC, 0x6E, 0x89, 0x57, 0xF8, 0xBB, 0x91, 0x1D,
             0x11, 0x18, 0x60, 0x84, 0x43, 0x6F, 0x3E, 0x15,
             0xE6, 0xDF, 0x32, 0x7B, 0x56, 0x8B, 0xA9, 0x42,
             0xDA, 0x8F, 0x86, 0x37, 0x71, 0xAA, 0x57, 0x7B}),
      point({0x32, 0xD5, 0x18, 0x91, 0x0B, 0x0B, 0x57, 0x5E,
             0xE0, 0x65, 0x83, 0xF6, 0xDA, 0x1C, 0xC0, 0x03,
             0x91, 0xA1, 0x76, 0x30, 0x49, 0x37, 0xD1, 0x64,
             0x4E, 0xD7, 0xEF, 0x28, 0xA2, 0xAA, 0xAB, 0x6A}),
      point({0xB4, 0x0C, 0x24, 0x26, 0xCE, 0xF4, 0x4B, 0xE6,
             0xC7, 0x7A, 0x12, 0xFA, 0x8E, 0xBC, 0x39, 0x1D,
             0x8C, 0x2D, 0xE5, 0xE6, 0x19, 0xDE, 0x94, 0x3B,
             0xD4, 0x01, 0x9A, 0xEA, 0x57, 0x08, 0xDE, 0x34}));
  EXPECT_EQ(verifiers, expectedVerifiers);
}

TEST_F(RskTranslatorTest, generateKeyComponent) {
  const auto masterPrivateEncryptionKeyShare = scalar(
      {0x3A, 0x53, 0x86, 0x2D, 0x0D, 0x0B, 0xA9, 0xE0,
       0x32, 0x3F, 0x19, 0x46, 0xEF, 0xE8, 0xB6, 0xE5,
       0x3F, 0xA5, 0xA1, 0xAF, 0x9E, 0xAC, 0xFB, 0xE2,
       0xD0, 0xFE, 0x93, 0x54, 0xFC, 0x36, 0x36, 0x03});

  const RekeyRecipient recipient(1, "User1");
  const auto factor = rsk.generateKeyFactor(recipient);
  const auto component = rsk.generateKeyComponent(factor, masterPrivateEncryptionKeyShare);

  const auto expectedComponent = scalar(
      {0x0F, 0xFF, 0xF1, 0x95, 0x0D, 0xE1, 0x02, 0xAF,
       0x16, 0xB6, 0xA4, 0xAD, 0x3F, 0x98, 0x7F, 0x37,
       0x36, 0xF7, 0x04, 0x1D, 0x92, 0x14, 0x7A, 0x17,
       0x19, 0x42, 0x59, 0xC3, 0xC9, 0xE1, 0x60, 0x07});
  EXPECT_EQ(component, expectedComponent);
}

}
