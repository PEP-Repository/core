.update-published-branch-base:
  stage: publish
  allow_failure: true
  rules:
    # Only on development branch
    - if: '$CI_COMMIT_REF_NAME == $PEP_FOSS_DEVELOPMENT_BRANCH'
      when: always
    - when: never
  tags:
    - docker-small
  image: alpine:latest

update-published-branch:
  extends: .update-published-branch-base
  variables:
    # Commit message that is used for the generated commit
    COMMIT_MESSAGE: |
      [Truncated History]

      This is an automatically generated squash commit of all commits
      made on the development branch of PEP since the creation of the
      git repository on 2016-05-30.

      Committers:

      - Joep Bos-Coenraad
      - Dennis Bor
      - Linus van Elswijk
      - Bernard van Gastel
      - Hans Harmannij
      - Wiske Houtsma
      - Danny van Kooten
      - Anna Krasnova
      - Kai van Lopik
      - Carlo Meijer
      - Sander Meis
      - Jon Moroney
      - Thomas van Oss
      - Jean Popma
      - Sietse Ringers
      - Joeri de Ruiter
      - Mathijs van de Ven
      - Steven Wallis de Vries
      - Bas Westerbaan
      - Bram Westerbaan
      - Ronny Wichers Schreur
    # Safety: do not overwrite any commit that does not contain this substring in the commit message
    COMMIT_MESSAGE_REQUIRED_SUBSTRING: This is an automatically generated squash commit of all commits
  before_script:
    - apk update -qq && apk add --no-cache git
    - git remote remove gitlab &>/dev/null || true
    - git remote add gitlab "https://gitlab-ci-token:${PEP_GROUP_REPOSITORY_TOKEN}@gitlab.pep.cs.ru.nl/pep/core.git"

  script:
    - set -eu

    # Functions
    - |
      git_timestamp() {
        git show -s --format=%ct "${1}"
      }

      safe_delete_branch() {
        readonly branch="${1}"

        abort_with_error_message() {
          >&2 echo "${1}"
          >&2 echo "Aborting to prevent any accidental loss of data."
          >&2 echo ""
          >&2 echo "If you are sure that it is safe to delete ${branch}, then please do so manually and then rerun this script."
          exit 1
        }

        if ! git show-ref --quiet refs/heads/"${1}"; then
          return
        fi

        readonly commit_count="$(git rev-list --count "${branch}")"
        if [ "${commit_count}" -gt 1 ]; then
          abort_with_error_message "Error: branch ${branch} already exists and has ${commit_count} commits."
        fi

        readonly message_of_last_commit="$(git log --format=%B -n 1 "${branch}")"
        if ! echo "${message_of_last_commit}" | grep -q "${COMMIT_MESSAGE_REQUIRED_SUBSTRING}"; then
          abort_with_error_message "Error: cannot overwrite a commit if the message does not contain the magic words."
        fi

        git checkout --detach --quiet # so that the scripts doesn't fail when ${branch} is the current branch
        git branch --delete --force "${branch}"
      }

    # Constants
    - |
      readonly CI_COMMIT_DATE="$(git show --no-patch --format=%cd --date=iso ${CI_COMMIT_SHA})"
      readonly CI_COMMIT_TIMESTAMP"$(git_timestamp ${CI_COMMIT_SHA})"

    # Git config
    - |
      git config --global user.email "support@pep.cs.ru.nl"
      git config --global user.name "Gitlab_CI_script"
      git config --global advice.detachedHead false

    # Make sure the local version of the target branch is up to date
    - |
      git branch -D "${PEP_FOSS_PUBLISHED_BRANCH}" 2>/dev/null || true
      if git ls-remote --exit-code --heads gitlab "${PEP_FOSS_PUBLISHED_BRANCH}"; then
        git fetch gitlab "${PEP_FOSS_PUBLISHED_BRANCH}" &>/dev/null
        git checkout -b "${PEP_FOSS_PUBLISHED_BRANCH}" "gitlab/${PEP_FOSS_PUBLISHED_BRANCH}"
      fi

      # Return to commit that triggered this job
      git checkout "${CI_COMMIT_SHA}"
      git clean -dfx

    # Publishing
    - |
      if [ "${CI_COMMIT_TIMESTAMP}" -le "$(git_timestamp ${PEP_FOSS_PUBLISHED_BRANCH})" ]; then
        >&2 echo "Skipping: The CI commit is not more recent than the head of branch ${PEP_FOSS_PUBLISHED_BRANCH}."
        exit 0
      fi
    - safe_delete_branch "${PEP_FOSS_PUBLISHED_BRANCH}"
    - ./scripts/git-create-truncated-history-branch.sh "${PEP_FOSS_PUBLISHED_BRANCH}" "${COMMIT_MESSAGE}"
    - |
      if [ "$(git rev-list --count HEAD)" -ne 1 ]; then
        >&2 echo "Logic Error: Current branch should only have 1 commit after truncating. Aborting."
        exit 1
      fi
    - git commit --amend --no-edit --date "${CI_COMMIT_DATE}"
    - git push --force-with-lease --push-option ci.skip gitlab

push-published-branch-to-github:
  extends: .update-published-branch-base
  needs: [update-published-branch]
  before_script:
    - apk update -qq && apk add --no-cache git
    - git remote remove gitlab &>dev/null || true
    - git remote add gitlab "https://gitlab-ci-token:${PEP_GROUP_REPOSITORY_TOKEN}@gitlab.pep.cs.ru.nl/pep/core.git"
    - git remote remove github &>/dev/null || true
    - git remote add github "https://pep-team:${GITHUB_ACCESS_TOKEN}@github.com/PEP-Repository/core.git"

  script:
    - set -eu
    # Fetch the target branch at the start so that the final `git push --force-with-lease` fails if it changed
    - git fetch github "${PEP_FOSS_PUBLISHED_BRANCH}" &>/dev/null
    # Make sure the local version of the published branch is up to date
    - |
      git branch -D "${PEP_FOSS_PUBLISHED_BRANCH}" 2>/dev/null || true
      git fetch gitlab "${PEP_FOSS_PUBLISHED_BRANCH}" &>/dev/null
      git checkout -b "${PEP_FOSS_PUBLISHED_BRANCH}" "gitlab/${PEP_FOSS_PUBLISHED_BRANCH}"

    - |
      readonly NR_OF_ROOT_COMMITS="$(git rev-list --max-parents=0 HEAD | wc -l)"
      readonly TIMESTAMP_OF_EARLIEST_COMMIT="$(git log --reverse --format=%at -n 1 HEAD)"
      readonly EARLIEST_ALLOWED_TIMESTAMP="$(date -d "2025-01-01" +%s)"
    - |
      if [ "${TIMESTAMP_OF_EARLIEST_COMMIT}" -lt "${EARLIEST_ALLOWED_TIMESTAMP}" ]; then
        >&2 echo "Error: The current branch contains commits that were created before we went open source. Aborting"
        exit 1
      fi
    - |
      if [ "${NR_OF_ROOT_COMMITS}" -ne 1 ]; then
        >&2 echo "Error: The current branch has more than one root commit. Aborting"
        exit 1
      fi
    - git push --force-with-lease github

